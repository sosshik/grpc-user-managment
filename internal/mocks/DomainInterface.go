// Code generated by mockery v2.37.0. DO NOT EDIT.

package mocks

import (
	domain "git.foxminded.ua/foxstudent106264/task-4.1/internal/domain"
	mock "github.com/stretchr/testify/mock"

	proto "git.foxminded.ua/foxstudent106264/task-4.1/protos/gen/go/user_service"

	uuid "github.com/google/uuid"
)

// DomainInterface is an autogenerated mock type for the DomainInterface type
type DomainInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *DomainInterface) CreateUser(user domain.UserProfileDTO) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.UserProfileDTO) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: oid
func (_m *DomainInterface) DeleteUser(oid uuid.UUID) error {
	ret := _m.Called(oid)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(oid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *DomainInterface) GetUserByEmail(email string) (domain.UserProfileDTO, error) {
	ret := _m.Called(email)

	var r0 domain.UserProfileDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.UserProfileDTO, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) domain.UserProfileDTO); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(domain.UserProfileDTO)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *DomainInterface) GetUserByID(userID uuid.UUID) (domain.UserProfileDTO, error) {
	ret := _m.Called(userID)

	var r0 domain.UserProfileDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (domain.UserProfileDTO, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.UserProfileDTO); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(domain.UserProfileDTO)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *DomainInterface) GetUsers() ([]*proto.UserInfo, error) {
	ret := _m.Called()

	var r0 []*proto.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*proto.UserInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*proto.UserInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user
func (_m *DomainInterface) UpdateUser(user domain.UserProfileDTO) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.UserProfileDTO) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDomainInterface creates a new instance of DomainInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDomainInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DomainInterface {
	mock := &DomainInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
